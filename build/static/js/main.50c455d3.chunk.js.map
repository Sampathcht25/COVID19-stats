{"version":3,"sources":["api/index.ts","components/cards.less","components/cards.tsx","components/table/table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiURL","fetchCountryData","URL_param","a","updateURL","undefined","axios","get","then","response","result","data","error","console","log","fetchCountryReport","Cards","useState","getData","setData","setReportData","useEffect","reportData","fetch_Data","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","confirmed","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","TableData","TableContainer","Table","TableHead","TableRow","map","val","TableCell","TableBody","sort","b","cases","key","hover","align","country","todayCases","todayDeaths","active","population","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50c455d3.chunk.js","sourcesContent":["import axios from 'axios';\r\n/**\r\n * Fetch covid19 upto date stats\r\n * **/\r\n const apiURL = 'https://covid19.mathdro.id/api';\r\n //Confirmed: https://covid19.mathdro.id/api/countries/USA/confirmed\r\n//Recovered: https://covid19.mathdro.id/api/countries/USA/recovered\r\n// Deaths: https://covid19.mathdro.id/api/countries/USA/deaths\r\n\r\n\r\n\r\nexport const fetchCountryData = async(URL_param:any) => {\r\n    let updateURL = apiURL;\r\n    let result;\r\n    \r\n    if(URL_param !== undefined){\r\n        updateURL = `${apiURL}/countries/${URL_param}`;\r\n    };\r\n\r\n    await axios.get(updateURL).then((response) => {\r\n        result =  response.data;\r\n    }, (error) => {\r\n        console.log(error);\r\n    });\r\n    \r\n    return result;\r\n\r\n    // try {\r\n    //     const {data: {confirmed, recovered, deaths,lastUpdate}} = await axios.get(updateURL);\r\n    //     return {confirmed, recovered, deaths,lastUpdate};\r\n    // } catch (err) {\r\n    //     console.log(err);\r\n    // }\r\n};\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    let result:any;\r\n\r\n    await axios.get(`${apiURL}/daily`).then((response) => {\r\n        result = response.data;\r\n    }, (error) => {\r\n        console.log(error);\r\n    });\r\n    console.log(result, \"fetchDailyData\");\r\n    const updateResult = result.map((data:any) => ({\r\n        confirmed: data.confirmed.total,\r\n        deaths: data.deaths.total,\r\n        date: data.reportDate\r\n    }))\r\n    return updateResult;\r\n};\r\n\r\nexport const fetchCountriesData = async() => {\r\n    try {\r\n        const result:any = await axios.get(`${apiURL}/countries`);\r\n        return result.data.countries.map((val:any) => val.name);\r\n    } catch(error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\nexport const fetchCountryReport = async() => {\r\n    try {\r\n        const result = await axios.get('https://disease.sh/v3/covid-19/countries');\r\n        return result.data;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/cards.3e81a29a.less\";","import React, {useEffect, useState} from'react';\r\nimport CountUp from  'react-countup';\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport { fetchCountryData, fetchCountriesData, fetchDailyData, fetchCountryReport } from '../api';\r\nimport './cards.less';\r\n\r\nexport const Cards = () => {\r\n    let getVal:any = null;\r\n    const [getData, setData] = useState(getVal);\r\n    const [getReportData, setReportData] = useState(getVal);\r\n\r\n  \r\n    useEffect(()=>{\r\n      const fetch_Data = async() => {\r\n        const data:any = await fetchCountryData(undefined);\r\n        const reportData:any = await fetchCountryReport();\r\n        setReportData(reportData);\r\n        setData(data);\r\n      };\r\n      \r\n      fetch_Data();\r\n    }, [setData, setReportData])\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={\"infect\"}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Covid cases\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={getData && getData.confirmed?.value} duration={2.8} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(getData && getData.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={\"recover-case\"}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={getData && getData.recovered?.value} duration={2.8} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(getData && getData.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recovery cases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={\"deaths\"}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={getData && getData.deaths?.value} duration={2.8} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(getData && getData.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of death cases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* <Grid item component={Card} xs={12} md={3} className={\"active\"}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Active\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={getReportData && getReportData.active} duration={2.8} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(getData && getData.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of Active cases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid> */}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React , {useState, useEffect} from 'react';\r\nimport {fetchCountryReport} from '../../api';\r\nimport {\r\n    Table, \r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    TableSortLabel,\r\n    Toolbar,\r\n    Typography,\r\n    Paper,\r\n    Checkbox,\r\n    IconButton,\r\n    Tooltip,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Switch,\r\n    Grid\r\n} from '@material-ui/core';\r\n\r\n\r\nexport const TableData = () => {\r\n    const data:any = null;\r\n    const [getData, setData] = useState(data);\r\n    const rowData = ['S.No', 'Country', 'Total Cases', 'Today Cases', 'Today Deaths',  'Total Deaths', 'Total Recovered', 'Active Cases', 'Population'];\r\n\r\n    useEffect(() => {\r\n        const result = async() => {\r\n            setData(await fetchCountryReport())\r\n        }\r\n\r\n        result()\r\n    }, [setData]);\r\n    \r\n    return(\r\n        <Grid container spacing={3} justify=\"center\">\r\n            <TableContainer className=\"table-container\">\r\n                <Table>\r\n                    <TableHead>\r\n                    <TableRow>\r\n                        {rowData.map((val) => <TableCell>{val}</TableCell>)}\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {getData && getData.sort((a:any, b:any) => b.cases-a.cases).map((key:any, val:any) => (\r\n                            <TableRow hover>\r\n                                <TableCell align=\"left\">{val+1}</TableCell>\r\n                                <TableCell align=\"left\">{key.country}</TableCell>\r\n                                <TableCell align=\"left\">{key.cases}</TableCell>\r\n                                <TableCell align=\"left\">{key.todayCases}</TableCell>\r\n                                <TableCell align=\"left\">{key.todayDeaths}</TableCell>\r\n                                <TableCell align=\"left\">{key.deaths}</TableCell>\r\n                                <TableCell align=\"left\">{key.recovered}</TableCell>\r\n                                <TableCell align=\"left\">{key.active}</TableCell>\r\n                                <TableCell align=\"left\">{key.population}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Cards} from './components/cards' ;\nimport {TableData} from './components/table/table';\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"header\">COVID-19 INFO</h1>\n        </header>\n      </div>\n      <Cards />\n      <TableData />\n      <footer>| @sam_cht25 | Email: Sampath.cht25@gmail.com |</footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}